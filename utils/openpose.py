"""Functions helping with running and getting results out of OpenPose."""


import logging
import os
from pathlib import Path
import shutil
import subprocess
from typing import List, Dict


logger = logging.getLogger(__name__)


def _check_exists(
    inputs_dir: str,
    pose_estimation_views: List[str],
):
    """
    Check if the OpenPose results already exist.

    Args:
    ----
    inputs_dir: The directory containing the inputs to be processed.
    pose_estimation_views: The views to check.

    Returns:
    -------
    True if the results already exist, False otherwise.
    """
    view = pose_estimation_views[0]
    image_path = Path(inputs_dir) / view / "preprocessed"
    json_destination = Path(image_path) / "openpose.json"
    return json_destination.exists()


def _load_inputs(
    inputs_dir: str,
    pose_estimation_views: List[str],
    output_path: Path,
) -> Dict[str, Path]:
    """
    Copy the image inputs in a single directory, to enable OpenPose to process the batch.

    Args:
    ----
    inputs_dir: The directory containing the inputs to be processed.
    pose_estimation_views: The views to be processed.
    output_path: The directory that will be given to OpenPose.

    Returns:
    -------
    A mapping object between views and the paths to future outputs.
    """
    mappings = {}
    for view in pose_estimation_views:
        logger.info("Copying input for view %s...", view)

        image_path = Path(inputs_dir) / view / "preprocessed"
        mappings[view] = image_path

        image_input = image_path / "remove_bg_masked_rgb.png"
        image_copy = output_path / f"{view}.png"

        shutil.copyfile(image_input, image_copy)

    return mappings


def _do_run_open_pose(inputs_dir: Path) -> None:
    """
    Run OpenPose as an external process on the given input directory.

    Args:
    ----
    inputs_dir: The directory containing the inputs to be processed.
    """
    resolved_inputs = inputs_dir.resolve()

    logger.info("Running OpenPose on inputs: %s...", resolved_inputs)

    subprocess.run(
        [  # noqa: S603
            "/usr/bin/docker", "run",
            "-v", f"{resolved_inputs}:/data",
            "--gpus", "all",
            "-it", "openpose",
            "-display", "0",
            "-image_dir", "/data",
            "-write_images", "/data/result",
            "-write_json", "/data/result",
        ],
        check=True,
    )

    uid = os.getuid()
    gid = os.getgid()

    # Sudo still necessary to change ownership of the files.
    # Even when the current user has permissions to run Docker,
    # its outputs are created as root.
    subprocess.run(
        [  # noqa: S603
            "/usr/bin/sudo", "chown",
            "-R",
            f"{uid}:{gid}",
            f"{resolved_inputs}",
        ],
        check=True,
    )

    logger.info("OpenPose Docker completed.")


def _transfer_results(openpose_dir: Path, mappings: Dict[str, Path]) -> None:
    """
    Transfer the results of OpenPose to the original input directories.

    Args:
    ----
    openpose_dir: The directory containing the outputs of OpenPose.
    mappings: A mapping object between views and the paths where to store the OpenPose JSON output.
    """
    for view, image_path in mappings.items():
        json_result = openpose_dir / "result" / f"{view}_keypoints.json"
        json_destination = Path(image_path) / "openpose.json"

        if not json_destination.exists():
            shutil.copyfile(json_result, json_destination)


def run_open_pose(sample_path: str, pose_estimation_views: List[str]) -> None:
    """
    Run the OpenPose pose estimation algorithm on the input files in the specified directory.

    This function returns nothing. It adds the generated JSON files
    directly in the original inputs.

    The JSON files generated by OpenPose will be located in the original
    `inputs_dir` directory, inside the `preprocessed` subdirectory, and
    will be named `openpose.json`.

    Args:
    ----
    sample_path: The path to the directory containing the input files.
    pose_estimation_views: A list of view names to use for pose estimation.
    """
    logger.info("Starting OpenPose process...")

    # inputs_dir = get_views_path(sample_path)

    if _check_exists(inputs_dir, pose_estimation_views):
        logger.info("OpenPose results already exist. Skipping.")
        return

    openpose_dir = Path(sample_path) / "openpose_inputs"
    shutil.rmtree(openpose_dir, ignore_errors=True)

    try:
        openpose_dir.mkdir(parents=True, exist_ok=True)

        logger.info("Preparing OpenPose inputs...")
        views_mappings = _load_inputs(inputs_dir, pose_estimation_views, openpose_dir)

        _do_run_open_pose(openpose_dir)

        logger.info("Finalizing OpenPose outputs...")
        _transfer_results(openpose_dir, views_mappings)

        shutil.rmtree(openpose_dir, ignore_errors=True)

        logger.info("OpenPose process completed.")
    except Exception as error:
        logger.error("OpenPose process failed: %s. Cleaning outputs directory.", error)
        shutil.rmtree(openpose_dir, ignore_errors=True)
        raise error